#!/bin/bash
#
# Copy createdb.sh.example to createdb.sh
# then uncomment then set database name and username to create you need databases
#
# example: .env POSTGRES_USER=appuser and need db name is myshop_db
# 
#    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
#        CREATE USER myuser WITH PASSWORD 'mypassword';
#        CREATE DATABASE myshop_db;
#        GRANT ALL PRIVILEGES ON DATABASE myshop_db TO myuser;
#    EOSQL
#
# this sh script will auto run when the postgres container starts and the $DATA_PATH_HOST/postgres not found.
#
# 
# psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
#     CREATE USER db1 WITH PASSWORD 'db1';
#     CREATE DATABASE db1;
#     GRANT ALL PRIVILEGES ON DATABASE db1 TO db1;
# EOSQL
# 
# psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
#     CREATE USER db2 WITH PASSWORD 'db2';
#     CREATE DATABASE db2;
#     GRANT ALL PRIVILEGES ON DATABASE db2 TO db2;
# EOSQL
# 
# psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
#     CREATE USER db3 WITH PASSWORD 'db3';
#     CREATE DATABASE db3;
#     GRANT ALL PRIVILEGES ON DATABASE db3 TO db3;
# EOSQL
### default database and user for postgres spi ##########################################

if [ "$POSTGRES_INIT" == 'true' ]; then
	psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" <<-EOSQL #--dbname postgres <<-EOSQL
		--CREATE USER "${POSTGRES_USER}" WITH PASSWORD "${POSTGRES_PASSWORD}";
		CREATE DATABASE "${POSTGRES_DB}";
		GRANT ALL PRIVILEGES ON DATABASE "${POSTGRES_DB}" TO "${POSTGRES_USER}";
		ALTER ROLE postgres CREATEROLE SUPERUSER;
	EOSQL
	echo

	psql -v ON_ERROR_STOP=1 --username "${POSTGRES_USER}" --dbname "${POSTGRES_DB}" <<-EOSQL
		
		create table if not exists hash_file (
		         id int8 generated by default as identity,
		          filename varchar(255),
		          hash varchar(255),
		          primary key (id)
		      );
		      create table if not exists phonenumber (
		         id int8 generated by default as identity,
		          ddd varchar(255),
		          number varchar(255),
		          primary key (id)
		      );
		      create table if not exists roles (
		         id int4 generated by default as identity,
		          name varchar(20),
		          primary key (id)
		      );
		      create table if not exists user_phonenumber (
		         user_id int8 not null,
		          phone_id int8 not null,
		          primary key (user_id, phone_id)
		      );
		      create table if not exists  user_roles (
		         user_id int8 not null,
		          role_id int4 not null,
		          primary key (user_id, role_id)
		      );
		      create table if not exists users (
		         id int8 generated by default as identity,
		          email varchar(255),
		          external_id varchar(255) not null,
		          name varchar(255),
		          password varchar(255),
		          username varchar(255),
		          primary key (id)
		      );
		      alter table if exists users 
		         add constraint UKr43af9ap4edm43mmtq01oddj6 unique (username);
		      alter table if exists users 
		         add constraint UK6dotkott2kjsp8vw4d0m25fb7 unique (email);
		      alter table if exists user_phonenumber 
		         add constraint FKbc18lkocd9y8h18ywseo372vf 
		         foreign key (phone_id)
		         references phonenumber;
		      alter table if exists user_phonenumber 
		         add constraint FKj8l9uaouvrj6v39hrcgdwhwss 
		         foreign key (user_id) 
		         references users;
		     alter table if exists user_roles 
		         add constraint FKh8ciramu9cc9q3qcqiv4ue8a6 
		         foreign key (role_id) 
		         references roles;
		      alter table if exists user_roles 
		         add constraint FKhfh9dx7w3ubf1co1vdev94g3f 
		         foreign key (user_id) 
		         references users;

		        INSERT INTO roles (id, name) VALUES(1,'ROLE_USER');
				INSERT INTO roles (id, name) VALUES(2,'ROLE_ADMIN');


	EOSQL
fi
